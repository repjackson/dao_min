template(name='questions')
    .ui.stackable.padded.grid
        .row
            .eight.wide.right.aligned.column
                .ui.icon.button.add_question(title='add question')
                    i.plus.icon
                +question_cloud
            .eight.wide.column
                if currentUser
                    |view 
                    .ui.button.view_answered(class=view_answered_class) answered
                    .ui.button.view_unanswered(class=view_unanswered_class) unanswered
                .scrolling    
                    each questions
                        +question_segment


template(name='question_cloud')
    div
    //- #cloud
        //- .ui.left.icon.input
        //-     i.search.icon
        //-     input#search(type='text' placeholder='search')
            //- +inputAutocomplete settings=settings id="search" class="" autocomplete="off" 
    if selected_tags
        #clear_tags.ui.active.icon.button
            i.remove.icon
        each selected_tags
            .unselect_tag.ui.active.button
                strong #{this}
    each all_tags
        .ui.compact.button.select_tag(class=cloud_tag_class) 
            strong #{this.name}



template(name='question_segment')
    //- .ui.card    
    .ui.basic.segment
        .content
            a.ui.header(href="/question/#{_id}/view") #{title}
            div
            //- each tags
            //-     .ui.basic.label #{this}
            div
            //- +remove_button
            +voting_full
            //- if my_answer
            //-     //- .ui.header your answer
            //-     with my_answer
            //-         .ui.small.header #{choice_content }#{when} by #{_author_username}
            //- if upvoter_ids
            //-     i.grey.thumbs.up.outline.icon(title='upvoters')
            //-     each upvoter_ids
            //-         +user_info this
            //- if downvoter_ids
            //-     i.grey.thumbs.down.outline.icon(title='downvoters')
            //-     each downvoter_ids
            //-         +user_info this
            //- if points 
            //-     .ui.circular.label #{points}
            //-     | (#{upvotes} / #{downvotes})
        //- a.ui.large.button(href="/question/#{_id}/view")
        //-     |view
        



template(name='question_view')
    with current_doc
        .ui.stackable.padded.grid
            .centered.row
                .ten.wide.center.aligned.column
                    .ui.large.header #{title}
                    if can_edit
                        a.ui.icon.circular.button(href="/question/#{_id}/edit")
                            i.pencil.icon
                        +remove_button
                    each tags 
                        .ui.basic.label #{this}
                    +voting_full
            .centered.row
                .ten.wide.column            
                    .ui.header stats
                    .ui.icon.circular.small.button.calc_stats
                        i.refresh.icon
                    .ui.list 
                        .item #{view_count} views
                        .item #{vote_count} votes
                        .item upvoters
                            each upvoter_ids
                                +user_info this
                        .item downvoters
                            each downvoter_ids
                                +user_info this

template(name='question_edit')
    with current_doc
        .ui.stackable.padded.grid
            .centered.row
                .ten.wide.center.aligned.column 
                    .ui.header 
                        | edit '#{title}'
                    a.ui.big.icon.circular.button(href="/question/#{_id}/view" title='save')
                        //- |save
                        i.large.checkmark.icon
                    +remove_button
            .centered.row
                .ten.wide.column 
                    .ui.inline.grey.header question
                    .ui.fluid.big.input
                        input.edit_title(type='text' value=title autocomplete="off")
                    .ui.hidden.divider
                    .ui.inline.grey.header tags
                    div
                    .ui.icon.input
                        i.plus.icon
                        input.new_tag(type='text' autocomplete="off")
                    each tags
                        .ui.large.basic.label
                            i.delete.icon.remove_element
                            |#{this}
                



template(name='remove_button')
    .ui.icon.circular.button.remove
        i.remove.icon
