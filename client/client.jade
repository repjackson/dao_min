head
    title dao
    meta(name='viewport', content='user-scalable=yes, initial-scale=1.0, maximum-scale=1.0, width=device-width')
    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black')
    meta(name="msapplication-TileColor" content="#da532c")
    meta(name="theme-color" content="#000000")
    link(rel='stylesheet' type='text/css' href='https://cdn.jsdelivr.net/npm/fomantic-ui@2.7.4/dist/semantic.min.css')
    link(href="https://fonts.googleapis.com/css?family=Ubuntu:300,400&display=swap" rel="stylesheet")

    script(src='https://cdn.jsdelivr.net/npm/jquery@3.3.1/dist/jquery.min.js')
    script(src='https://cdn.jsdelivr.net/npm/fomantic-ui@2.7.4/dist/semantic.min.js')


template(name='layout')
    +nav
    +yield



template(name='not_found')
    .ui.basic.center.aligned.padded.segment
        .ui.center.aligned.header page not found
        a.ui.button(href="/") 
            i.home.icon
            |home




template(name='voting_full')
    i.thumbs.up.big.circular.link.upvote.icon(class=upvote_class)
    i.thumbs.down.big.circular.link.downvote.icon(class=downvote_class)
        //- |dislike
    //- if points
    //-     .ui.basic.label(title='points') #{points} pts
    //-     .ui.basic.label(title='anon points') #{anon_points} anon pts
    //- if upvoter_ids
    //-     .ui.small.grey.inline.header 
    //-         //- i.thumbs.up.outline.icon
    //-         |upvoters
    //-     each upvoter_ids
    //-         +user_info




template(name='nav')
    .ui.grid
        .row
            .center.aligned.sixteen.wide.column
                //- a.ui.icon.big.circular.basic.button(href='/')
                //-     i.yin.yang.large.icon
                .ui.icon.large.circular.basic.button.add_question(title='add question')
                    i.large.plus.icon                
                unless currentUser
                    a.ui.big.circular.basic.button(href='/login') 
                        | login
                    a.ui.big.circular.basic.button(href='/register')
                        | register
                if currentUser
                    unless logging_out
                        a.ui.big.circular.basic.button.recalc_stats(href="/")
                            //- i.user.outline.icon
                            span #{currentUser.username} 
                    if logging_out
                        .ui.circular.basic.button
                            i.loading.circle.notch.icon


template(name='question_cloud')
    .ui.header tag cloud
    //- #cloud
        //- .ui.left.icon.input
        //-     i.search.icon
        //-     input#search(type='text' placeholder='search')
            //- +inputAutocomplete settings=settings id="search" class="" autocomplete="off" 
    if selected_tags
        #clear_tags.ui.active.icon.circular.large.compact.button
            i.remove.icon
        each selected_tags
            .unselect_tag.ui.active.circular.large.compact.button
                strong #{this}
    each all_tags
        .ui.circular.large.compact.button.select_tag(class=cloud_tag_class) 
            strong #{this.name}
    if selected_upvoter_ids
        #clear_upvoter_ids.ui.active.icon.circular.large.compact.button
            i.remove.icon
        each selected_upvoter_ids
            .unselect_upvoter_id.ui.active.circular.large.compact.button
                strong #{this}
    each all_upvoter_ids
        .ui.circular.large.compact.button.select_upvoter_id(class=cloud_upvoter_id_class) 
            strong #{this.name}



template(name='question_segment')
    //- .ui.card    
    .ui.segment
        .content
            a.ui.header(href="/question/#{_id}/view") #{title}
            +voting_full
        



template(name='question_view')
    with current_doc
        .ui.stackable.padded.grid
            .centered.row
                .ten.wide.center.aligned.column
                    .ui.large.inline.header #{title}
                    if can_edit
                        a.ui.icon.button(href="/question/#{_id}/edit")
                            i.pencil.icon
                        //- +remove_button
                    //- each tags 
                    //-     .ui.basic.label #{this}
                    +voting_full
            .centered.row
                .ten.wide.column            
                    .ui.inline.header stats
                    .ui.icon.small.button.calc_stats
                        i.refresh.icon
                    .ui.list 
                        //- .item #{view_count} views
                        .item #{vote_count} votes
                        .item up
                            each upvoter_ids
                                +user_info this
                        .item down
                            each downvoter_ids
                                +user_info this

template(name='question_edit')
    with current_doc
        .ui.stackable.padded.grid
            .centered.row
                .ten.wide.center.aligned.column 
                    .ui.inline.header 
                        | edit '#{title}'
                    a.ui.big.icon.circular.basic.button(href="/question/#{_id}/view" title='save')
                        //- |save
                        i.big.checkmark.icon
                    +remove_button
            .centered.row
                .ten.wide.column 
                    .ui.inline.grey.header question
                    .ui.fluid.big.input
                        input.edit_title(type='text' value=title autocomplete="off")
                    .ui.hidden.divider
                    .ui.inline.grey.header tags
                    div
                    .ui.icon.input
                        i.plus.icon
                        input.new_tag(type='text' autocomplete="off")
                    each tags
                        .ui.large.basic.label
                            i.delete.icon.remove_element
                            |#{this}
                



template(name='remove_button')
    .ui.icon.circular.basic.button.remove
        i.remove.icon




template(name='home')                    
    .ui.stackable.padded.grid
        .one.column.row
            .column
                each questions
                    +question_segment
        .one.column.row
            .column
                .ui.inline.header selected users
                each selected_users
                    .ui.large.basic.label
                        |#{this}
                .ui.inline.header add user
                .ui.input
                    input.add_username(type='text' placeholder='add username')
                each users 
                    .ui.button.add_user #{username}
        .one.column.row
            .column
                +question_cloud




template(name='register')
    .ui.padded.stackable.grid
        .centered.row
            .ten.wide.column
                .ui.center.aligned.basic.segment
                    a.ui.icon.button(href="/")
                        i.large.home.icon
                    div
                    .ui.inline.header register
                .ui.small.inline.header 
                    |username
                .ui.fluid.icon.input(class=login_class)
                    //- if username_valid
                    //-     i.green.checkmark.icon
                    //- else
                    //-     i.red.ban.icon
                    input.username(type='text')
                .ui.small.inline.header 
                    | password
                .ui.fluid.input(class=login_class)
                    input.password(type='password')
                if can_register
                    //- if registering
                    .ui.fluid.large.button.register(class=enter_class)
                        |register '#{username}'
                else
                    .ui.small.header username "#{username}" found
                    a.ui.basic.fluid.button(href='/login') 
                        |login
                .ui.center.aligned.basic.segment    
                    //- .ui.small.header by registering you agree to our 
                    //-     a(href='/p/privacy' target="_window") privacy policy
                    unless username
                        .ui.small.header or
                            a.ui.basic.sign.in.button(href='/login') 
                                i.sign.in.alternate.icon
                                |login

template(name='login')
    .ui.padded.stackable.grid
        .centered.row
            .eight.wide.column
                div
                .ui.inline.small.header 
                    |username
                .ui.fluid.large.input(class=login_class)
                    input.username(type='text')
                .spacer
                .ui.inline.small.header 
                    | password
                .ui.fluid.large.input(class=login_class)
                    input.password(type='password')
                //- if username
                //- if logging_in
                .ui.fluid.big.button.enter(title="login #{username}" class=enter_class)
                    |login
                    strong #{username}
                    //- i.right.chevron.icon
                //- else
                //-     if username
                //-         .ui.center.aligned.basic.segment
                //-             .ui.header no '#{username}' user
                //-             a.ui.button(href='/choose_persona')
                //-                 i.user.plus.icon
                //-                 | register
                .ui.center.aligned.basic.segment    
                    //- a.ui.button(href='/forgot_password')
                    //-     i.refresh.icon
                    //-     |forgot password
                    a.ui.button(href='/register') 
                        |register
                    //- .ui.center.aligned.inline.header see the front desk to register an account
