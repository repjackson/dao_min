template(name='users')
    .ui.padded.stackable.grid
        .row 
            .sixteen.wide.column
                .ui.header users
                each users 
                    a.ui.large.button(href="/user/#{_id}") #{username}



template(name='register')
    .ui.padded.stackable.grid
        .centered.row
            .ten.wide.column
                .ui.center.aligned.basic.segment
                    a.ui.icon.button(href="/")
                        i.large.home.icon
                    div
                    .ui.inline.header register
                .ui.small.inline.header 
                    |username
                .ui.fluid.icon.input(class=login_class)
                    //- if username_valid
                    //-     i.green.checkmark.icon
                    //- else
                    //-     i.red.ban.icon
                    input.username(type='text')
                .ui.small.inline.header 
                    | password
                .ui.fluid.input(class=login_class)
                    input.password(type='password')
                if can_register
                    //- if registering
                    .ui.fluid.large.button.register(class=enter_class)
                        |register '#{username}'
                else
                    .ui.small.header username "#{username}" found
                    a.ui.basic.fluid.button(href='/login') 
                        |login
                .ui.center.aligned.basic.segment    
                    //- .ui.small.header by registering you agree to our 
                    //-     a(href='/p/privacy' target="_window") privacy policy
                    unless username
                        .ui.small.header or
                            a.ui.basic.sign.in.button(href='/login') 
                                i.sign.in.alternate.icon
                                |login



template(name='login')
    .ui.padded.stackable.grid
        .centered.row
            .eight.wide.column
                div
                .ui.inline.small.header 
                    |username
                .ui.fluid.large.input(class=login_class)
                    input.username(type='text')
                .spacer
                .ui.inline.small.header 
                    | password
                .ui.fluid.large.input(class=login_class)
                    input.password(type='password')
                //- if username
                //- if logging_in
                .ui.fluid.big.button.enter(title="login #{username}" class=enter_class)
                    |login
                    strong #{username}
                    //- i.right.chevron.icon
                //- else
                //-     if username
                //-         .ui.center.aligned.basic.segment
                //-             .ui.header no '#{username}' user
                //-             a.ui.button(href='/choose_persona')
                //-                 i.user.plus.icon
                //-                 | register
                .ui.center.aligned.basic.segment    
                    //- a.ui.button(href='/forgot_password')
                    //-     i.refresh.icon
                    //-     |forgot password
                    a.ui.button(href='/register') 
                        |register
                    //- .ui.center.aligned.inline.header see the front desk to register an account

template(name='profile_layout')
    +nav
    with current_user
        .ui.stackable.padded.grid
            .row
                .three.wide.column
                    img.ui.centered.small.circular.profile_image.image(src="{{c.url current_user.profile_image_id height=200 width=200 gravity='face' crop='fill'}}")
                    //- .ui.center.aligned.basic.segment
                        //- a(href="/user/#{user._id}")
                    .ui.center.aligned.inline.header.recalc_stats
                        |#{current_user.username}'s dashboard
                    .ui.center.aligned.inline.header
                        | #{user.first_name} #{user.last_name}
                    //- a.ui.large.button.logout_other_clients(href="#" title='logout other clients')
                    //-     //- i.globe.icon
                    //-     |log out other clients
                    
                    .ui.fluid.vertical.menu
                        a.item(href="/user/#{user._id}/")
                            |dashboard
                        a.item(href="/user/#{user._id}/up" class)
                            |up
                        a.item(href="/user/#{user._id}/down")
                            |down
                    if is_current_user
                        a.ui.fluid.button(href="/user/#{current_user._id}/edit")
                            |settings
                        .ui.fluid.button.logout
                            |log out

                .thirteen.wide.column
                    +yield    
                
                    
template(name='user_dashboard')                    
    .ui.stackable.padded.grid
        .two.column.row
            //- .column
            //-     .ui.header #{current_user.answered_count} answered questions 
            //-     each current_user.answered_cloud
            //-         .ui.label #{name}
            //-             //- small #{count}
            //-     div list
            //-     .ui.link.list
            //-         each answered_questions
            //-             .item 
            //-                 .content 
            //-                     .header #{title}
            //-                     .meta 
            //-                         small #{when}
            .column
                .ui.header #{current_user.up_count} 
                    i.chevron.up.icon
                each current_user.up_cloud
                    .ui.large.basic.label #{name}
                    //- small #{count}    
                .ui.link.list
                    each upvotes
                        .item #{title}
                        //- .meta 
                            //- small #{when}
            .column
                .ui.header #{current_user.down_count} 
                    i.chevron.down.icon
                each current_user.down_cloud
                    .ui.large.basic.label #{name}
                    //- small #{count}       
                |list
                .ui.link.list
                    each downvotes
                        .item #{title}


template(name='user_down')
    .ui.center.aligned.header user down
    .ui.stackable.grid 
        .three.column.row
            .column
                .ui.header #{current_user.down_count} down 
                each current_user.down_cloud
                    .ui.basic.large.label #{name}
                        small #{count}    
                .scrolling
                    .ui.link.list
                        each down_answers
                            a.item(href="/question/#{_id}/view") #{title}
            .column
                .ui.inline.header overlap
                i.circular.refresh.link.icon.calc_down_overlap
                .ui.header #{union_doc.down_points} down matching points
                //- each union_doc.down_list
                //-     .ui.basic.large.label #{this}
                each union_doc.down_cloud
                    .ui.basic.large.label #{name} 
                        small #{count}
            .column
                .ui.header #{currentUser.down_count} down 
                each currentUser.down_cloud
                    .ui.basic.large.label #{name}
                        small #{count}
                .ui.header most matched users
                
                
template(name='user_up')
    .ui.center.aligned.header user up
    .ui.stackable.grid 
        .three.column.row
            .column
                .ui.header #{current_user.username} 
                    small #{current_user.up_count} up answers 
                each current_user.up_cloud
                    .ui.basic.large.label #{name}
                        small #{count}    
                .scrolling
                    .ui.link.list
                        each up_answers
                            a.item(href="/question/#{_id}/view") #{title}
            .column
                .ui.inline.header overlap
                i.refresh.circular.icon.calc_up_overlap 
                .ui.header #{union_doc.up_points} up points
                //- each union_doc.up_list
                //-     .ui.basic.large.label #{this}
                each union_doc.up_cloud
                    .ui.basic.large.label #{name} 
                        small #{count}
            .column
                .ui.header #{currentUser.username} #{currentUser.up_count} up answers 
                each currentUser.up_cloud
                    .ui.basic.large.label #{name}
                        small #{count}
                .ui.header most matched users
