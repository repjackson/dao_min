template(name='nav')
    .ui.grid
        .row
            .center.aligned.sixteen.wide.column
                //- a.ui.icon.big.circular.basic.button(href='/')
                //-     i.yin.yang.large.icon
                .ui.icon.large.circular.basic.button.add_question(title='add question')
                    i.large.plus.icon                
                unless currentUser
                    a.ui.big.circular.basic.button(href='/login') 
                        | login
                    a.ui.big.circular.basic.button(href='/register')
                        | register
                if currentUser
                    unless logging_out
                        a.ui.big.circular.basic.button.recalc_stats(href="/user/#{currentUser._id}")
                            //- i.user.outline.icon
                            span #{currentUser.username} 
                    if logging_out
                        .ui.circular.basic.button
                            i.loading.circle.notch.icon

template(name='questions')
    .ui.stackable.padded.grid
        //- .centered.row
        //-     .eight.wide.center.aligned.column
        //-         if currentUser
        //-             .ui.circular.button.view_answered(class=view_answered_class) voted
        //-             .ui.circular.button.view_unanswered(class=view_unanswered_class) unvoted
        .centered.row
            //- .eight.wide.right.aligned.column
            //-     +question_cloud
            .eight.wide.column
                .scrolling    
                    each questions
                        +question_segment


template(name='question_cloud')
    div
    //- #cloud
        //- .ui.left.icon.input
        //-     i.search.icon
        //-     input#search(type='text' placeholder='search')
            //- +inputAutocomplete settings=settings id="search" class="" autocomplete="off" 
    if selected_tags
        #clear_tags.ui.active.icon.circular.button
            i.remove.icon
        each selected_tags
            .unselect_tag.ui.active.circular.button
                strong #{this}
    each all_tags
        .ui.circular.basic.button.select_tag(class=cloud_tag_class) 
            strong #{this.name}



template(name='question_segment')
    //- .ui.card    
    .ui.basic.segment
        .content
            a.ui.header(href="/question/#{_id}/view") #{title}
            //- each tags
            //-     .ui.basic.label #{this}
            //- +remove_button
            +voting_full
            //- if my_answer
            //-     //- .ui.header your answer
            //-     with my_answer
            //-         .ui.small.header #{choice_content }#{when} by #{_author_username}
            //- if upvoter_ids
            //-     i.grey.thumbs.up.outline.icon(title='upvoters')
            //-     each upvoter_ids
            //-         +user_info this
            //- if downvoter_ids
            //-     i.grey.thumbs.down.outline.icon(title='downvoters')
            //-     each downvoter_ids
            //-         +user_info this
            //- if points 
            //-     .ui.label #{points}
            //-     | (#{upvotes} / #{downvotes})
        //- a.ui.large.button(href="/question/#{_id}/view")
        //-     |view
        



template(name='question_view')
    with current_doc
        .ui.stackable.padded.grid
            .centered.row
                .ten.wide.center.aligned.column
                    .ui.large.inline.header #{title}
                    if can_edit
                        a.ui.icon.button(href="/question/#{_id}/edit")
                            i.pencil.icon
                        //- +remove_button
                    //- each tags 
                    //-     .ui.basic.label #{this}
                    +voting_full
            .centered.row
                .ten.wide.column            
                    .ui.inline.header stats
                    .ui.icon.small.button.calc_stats
                        i.refresh.icon
                    .ui.list 
                        //- .item #{view_count} views
                        .item #{vote_count} votes
                        .item up
                            each upvoter_ids
                                +user_info this
                        .item down
                            each downvoter_ids
                                +user_info this

template(name='question_edit')
    with current_doc
        .ui.stackable.padded.grid
            .centered.row
                .ten.wide.center.aligned.column 
                    .ui.inline.header 
                        | edit '#{title}'
                    a.ui.big.icon.circular.basic.button(href="/question/#{_id}/view" title='save')
                        //- |save
                        i.big.checkmark.icon
                    +remove_button
            .centered.row
                .ten.wide.column 
                    .ui.inline.grey.header question
                    .ui.fluid.big.input
                        input.edit_title(type='text' value=title autocomplete="off")
                    .ui.hidden.divider
                    .ui.inline.grey.header tags
                    div
                    .ui.icon.input
                        i.plus.icon
                        input.new_tag(type='text' autocomplete="off")
                    each tags
                        .ui.large.basic.label
                            i.delete.icon.remove_element
                            |#{this}
                



template(name='remove_button')
    .ui.icon.circular.basic.button.remove
        i.remove.icon



template(name='donate')
    .ui.stackable.padded.grid
        .centered.row
            .twelve.wide.column
                .ui.inline.header 
                    |donate
                .ui.action.input
                    input.donate_amount(type='number' min='1' placeholder='amount')
                    .ui.icon.button.start_donation   
                        i.right.chevron.icon
                each donations
                    .ui.header 
                        strong $#{amount}
                        small #{when}:
                        | #{message}
            



template(name='profile_layout')
    +nav
    +questions
    with current_user
        .ui.stackable.padded.grid
            .row
                .three.wide.column
                    .ui.center.aligned.inline.header.recalc_stats
                        |#{current_user.username}'s dashboard
                    .ui.center.aligned.inline.header
                        | #{user.first_name} #{user.last_name}
                    //- a.ui.large.button.logout_other_clients(href="#" title='logout other clients')
                    //-     //- i.globe.icon
                    //-     |log out other clients
                    .ui.fluid.vertical.menu
                        a.item(href="/user/#{user._id}/")
                            |dashboard
                        a.item(href="/user/#{user._id}/up" class)
                            |up
                        //- a.item(href="/user/#{user._id}/down")
                        //-     |down
                    if is_current_user
                        a.ui.fluid.button(href="/user/#{current_user._id}/edit")
                            |settings
                        .ui.fluid.button.logout
                            |log out
                .thirteen.wide.column
                    +yield    
                
                    
template(name='user_dashboard')                    
    .ui.stackable.padded.grid
        .two.column.row
            //- .column
            //-     .ui.header #{current_user.answered_count} answered questions 
            //-     each current_user.answered_cloud
            //-         .ui.label #{name}
            //-             //- small #{count}
            //-     div list
            //-     .ui.link.list
            //-         each answered_questions
            //-             .item 
            //-                 .content 
            //-                     .header #{title}
            //-                     .meta 
            //-                         small #{when}
            .column
                .ui.header #{current_user.up_count} 
                    i.chevron.up.icon
                each current_user.up_cloud
                    .ui.large.basic.label #{name}
                    //- small #{count}    
                .ui.link.large.list
                    each upvotes
                        .item #{title}
                        //- .meta 
                            //- small #{when}
                .ui.header up matching
                .ui.large.list
                    each up_union_docs
                        .item
                            |#{up_points} up
                            each other_user_ids
                                +user_info this
                    
            .column
                .ui.header #{current_user.down_count} 
                    i.chevron.down.icon
                each current_user.down_cloud
                    .ui.large.basic.label #{name}
                    //- small #{count}       
                |list
                //- .ui.link.large.list
                //-     each downvotes
                //-         .item #{title}
                //- .ui.header down matching
                //- .ui.large.list
                //- each down_union_docs
                //-     .item
                //-         |#{down_points} down
                //-         each other_user_ids
                //-             +user_info this


template(name='user_up')
    .ui.center.aligned.header user up
    .ui.stackable.grid 
        .three.column.row
            .column
                .ui.header #{current_user.username} 
                    small #{current_user.up_count} up answers 
                each current_user.up_cloud
                    .ui.basic.large.label #{name}
                        small #{count}    
                .scrolling
                    .ui.link.list
                        each up_answers
                            a.item(href="/question/#{_id}/view") #{title}
            .column
                .ui.inline.header overlap
                i.refresh.circular.icon.calc_up_overlap 
                .ui.header #{union_doc.up_points} up points
                //- each union_doc.up_list
                //-     .ui.basic.large.label #{this}
                each union_doc.up_cloud
                    .ui.basic.large.label #{name} 
                        small #{count}
            .column
                .ui.header #{currentUser.username} #{currentUser.up_count} up answers 
                each currentUser.up_cloud
                    .ui.basic.large.label #{name}
                        small #{count}
                .ui.header most matched users



template(name='register')
    .ui.padded.stackable.grid
        .centered.row
            .ten.wide.column
                .ui.center.aligned.basic.segment
                    a.ui.icon.button(href="/")
                        i.large.home.icon
                    div
                    .ui.inline.header register
                .ui.small.inline.header 
                    |username
                .ui.fluid.icon.input(class=login_class)
                    //- if username_valid
                    //-     i.green.checkmark.icon
                    //- else
                    //-     i.red.ban.icon
                    input.username(type='text')
                .ui.small.inline.header 
                    | password
                .ui.fluid.input(class=login_class)
                    input.password(type='password')
                if can_register
                    //- if registering
                    .ui.fluid.large.button.register(class=enter_class)
                        |register '#{username}'
                else
                    .ui.small.header username "#{username}" found
                    a.ui.basic.fluid.button(href='/login') 
                        |login
                .ui.center.aligned.basic.segment    
                    //- .ui.small.header by registering you agree to our 
                    //-     a(href='/p/privacy' target="_window") privacy policy
                    unless username
                        .ui.small.header or
                            a.ui.basic.sign.in.button(href='/login') 
                                i.sign.in.alternate.icon
                                |login

template(name='login')
    .ui.padded.stackable.grid
        .centered.row
            .eight.wide.column
                div
                .ui.inline.small.header 
                    |username
                .ui.fluid.large.input(class=login_class)
                    input.username(type='text')
                .spacer
                .ui.inline.small.header 
                    | password
                .ui.fluid.large.input(class=login_class)
                    input.password(type='password')
                //- if username
                //- if logging_in
                .ui.fluid.big.button.enter(title="login #{username}" class=enter_class)
                    |login
                    strong #{username}
                    //- i.right.chevron.icon
                //- else
                //-     if username
                //-         .ui.center.aligned.basic.segment
                //-             .ui.header no '#{username}' user
                //-             a.ui.button(href='/choose_persona')
                //-                 i.user.plus.icon
                //-                 | register
                .ui.center.aligned.basic.segment    
                    //- a.ui.button(href='/forgot_password')
                    //-     i.refresh.icon
                    //-     |forgot password
                    a.ui.button(href='/register') 
                        |register
                    //- .ui.center.aligned.inline.header see the front desk to register an account
